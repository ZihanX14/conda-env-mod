.\" Automatically generated by Pandoc 2.11.1
.\"
.TH "CONDA-ENV-MOD" "1" "" "Version 1.0" "Custom Anaconda environment management"
.hy
.SH NAME
.PP
\f[B]conda-env-mod\f[R] \[en] Create and configure a custom anaconda
environment for installing Python packages.
.SH SYNOPSIS
.PP
\f[B]conda-env-mod\f[R] \f[B]subcommand\f[R] [\f[B]argument(s)\f[R]]
.PD 0
.P
.PD
\f[B]conda-env-mod\f[R] [\f[B]-h\f[R]|\f[B]--help\f[R]]
.SH DESCRIPTION
.PP
This script makes very minimal Anaconda environments and generates Lmod
module files for using them.
Users can later install and use python packages in the environment after
loading the modules.
.SS Key points:
.IP \[bu] 2
no need to \f[I]`source\ activate'\f[R] or \f[I]`conda\ activate'\f[R]
(csh/tcsh users, rejoice!)
.IP \[bu] 2
all users do is a familiar \f[I]`module\ use'\f[R] and
\f[I]`module\ load/unload'\f[R]
.IP \[bu] 2
generated environments have access to all packages of base Anaconda (but
users can also install their extras into environment)
.IP \[bu] 2
no more permission errors when Google tells user to do a
\f[I]`pip\ install'\f[R]
.IP \[bu] 2
sane Jupyter kernels
.SH USAGE
.PP
\f[B]conda-env-mod\f[R] \f[I]subcommand\f[R]
\f[I][\&...arguments...]\f[R]
.PD 0
.P
.PD
\f[B]conda-env-mod\f[R] \f[B]create\f[R] [\f[B]-n\f[R]
\f[I]env_name\f[R]|\f[B]-p\f[R] \f[I]env_path\f[R]] [\f[B]-m\f[R]
\f[I]module_dir\f[R]]
.PD 0
.P
.PD
\f[B]conda-env-mod\f[R] \f[B]delete\f[R] [\f[B]-n\f[R]
\f[I]env_name\f[R]|\f[B]-p\f[R] \f[I]env_path\f[R]] [\f[B]-m\f[R]
\f[I]module_dir\f[R]]
.PD 0
.P
.PD
\f[B]conda-env-mod\f[R] \f[B]module\f[R] [\f[B]-n\f[R]
\f[I]env_name\f[R]|\f[B]-p\f[R] \f[I]env_path\f[R]] [\f[B]-m\f[R]
\f[I]module_dir\f[R]]
.PD 0
.P
.PD
\f[B]conda-env-mod\f[R] \f[B]kernel\f[R] [\f[B]-n\f[R]
\f[I]env_name\f[R]|\f[B]-p\f[R] \f[I]env_path\f[R]]
.PD 0
.P
.PD
\f[B]conda-env-mod\f[R] \f[B]help\f[R]
.SH EXAMPLES
.PP
\f[I]conda-env-mod create -n my_test\f[R]
.PD 0
.P
.PD
\f[I]conda-env-mod create -p /my/project/dir/my_test\f[R]
.PD 0
.P
.PD
\f[I]\&.....\f[R]
.PD 0
.P
.PD
\f[I]module use $HOME/privatemodules\f[R]
.PD 0
.P
.PD
\f[I]module load conda-env/my_test-py3.6.4\f[R]
.PD 0
.P
.PD
\f[I]pip install \&....\f[R]
.PD 0
.P
.PD
\f[I]conda install \&....\f[R]
.SH SUBCOMMANDS
.TP
\f[B]create\f[R]
Create an environment.
Must specify \f[I]env_name\f[R] or \f[I]env_path\f[R].
.TP
\f[B]delete\f[R]
Delete an existing environment.
Must specify \f[I]env_name\f[R] or \f[I]env_path\f[R].
.TP
\f[B]module\f[R]
Create a module file for an existing environment.
Must specify \f[I]env_name\f[R] or \f[I]env_path\f[R].
.TP
\f[B]kernel\f[R]
Create a Jupyter kernel for an existing environment.
Must specify \f[I]env_name\f[R] or \f[I]env_path\f[R].
.TP
\f[B]help\f[R]
Display brief usage information.
.SH ARGUMENTS
.SS Required (pick one):
.TP
\f[B]-n\f[R], \f[B]--name\f[R] \f[I]env_name\f[R]
Name of the environment.
.TP
\f[B]-p\f[R], \f[B]--prefix\f[R] \f[I]env_path\f[R]
Location of the environment.
.SS Optional:
.TP
\f[B]-a\f[R], \f[B]--appname\f[R] \f[I]app_name\f[R]
Name of the module corresponding to the environment.
Default value is \f[I]`conda-env'\f[R].
.TP
\f[B]-m\f[R], \f[B]--moduledir\f[R] \f[I]module_dir\f[R]
Location of the module file.
Default value is \f[I]$HOME/privatemodules\f[R].
.TP
\f[B]-y\f[R], \f[B]--yes\f[R]
Assume \f[I]\[dq]yes\[dq]\f[R] to all internal questions.
Default is to ask confirmations interactively.
.TP
\f[B]-j\f[R], \f[B]--jupyter\f[R]
When performing \f[B]\[lq]create\[rq]\f[R] or
\f[B]\[lq]module\[rq]\f[R], also generate a Jupyter kernel for this
environment.
This option will also imply \f[I]`--local-python'\f[R].
Default is to skip Jupyter kernel creation.
.TP
\f[B]--local-py\f[R], \f[B]--local-python\f[R], \f[B]--add-path\f[R], \f[B]--add-to-path\f[R]
By default, generated modulefiles rely on Python interpreter from the
base Anaconda (new environment\[cq]s \[lq]bin\[rq] directory is
\f[I]not\f[R] added to $PATH).
While this is intentional and desired, for some rare occasions you might
need to do the opposite and use Python (and commands) from the new
environment instead.
One notable use case is when creating a Jupyter kernel for new
environment, or occasionally when some of your desired packages conflict
with their counterparts in the base Anaconda.
This switch will tweak the generated modulefile to prepend
environment\[cq]s \[lq]bin\[rq] directory to the $PATH.
Note that if you go this route, base Anaconda packages become
unavailable, so you would have to install \f[I]all\f[R] of your
necessary packages into the environment.
.SS To summarize:
.IP \[bu] 2
In default mode, resulting environment uses \f[I]base\f[R] python and
all of the base\[cq]s existing packages, while \f[I]`pip\ install'\f[R]
and \f[I]`conda\ install'\f[R] conveniently install new packages into
the environment.
.IP \[bu] 2
In the \f[B]--local-python\f[R] mode, your resulting environment uses
the \f[I]environment\[cq]s\f[R] python, and does \f[I]not\f[R] see any
of the base Anaconda packages.
So you would have to \f[I]`pip\ install'\f[R] and
\f[I]`conda\ install'\f[R] everything you need.
.IP \[bu] 2
Do not use \f[I]`pip\ install\ --user'\f[R] (you want your packages to
go into the environment rather than into \f[I]$HOME/.local/lib/\f[R]).
.PP
When generating Jupyter kernels (\f[B]\[lq]kernel\[rq]\f[R] mode or
\f[B]--jupyter\f[R]), everything about \f[B]--local-python\f[R] above
applies.
Additionally, we highly recommend installing your packages from the
command line.
\f[B]DO NOT USE\f[R] plain \f[I]`!pip\ install'\f[R] or
\f[I]`!conda\ install'\f[R] from inside the Jupyter notebook! See
excellent explanation why here:
.PP
http://jakevdp.github.io/blog/2017/12/05/installing-python-packages-from-jupyter/
.PP
If you do need to install packages from inside a notebook, use either of
these calls in a cell:
.IP
.nf
\f[C]
!{sys.executable} -m pip install .....
!conda install --yes --prefix {sys.prefix} .....
\f[R]
.fi
.PP
The \f[I]`{sys.executable}'\f[R] and \f[I]`{sys.prefix}'\f[R] tokens
make sure that the kernel\[cq]s own tools are used (and not ones from
the separate JupyterHub installation itself), so packages get installed
in the right location and remain visible for the kernel.
.SH OPTIONS
.TP
\f[B]-h, --help\f[R]
Prints brief usage information.
.SH BUGS
.PP
No known bugs.
.PP
Please report issues on Github:
https://github.com/amaji/conda-env-mod/issues
.SH AUTHOR
.PP
Amiya K Maji and Lev Gorenstein, Purdue University
.SH SEE ALSO
.PP
\f[B]conda-env-mod(1)\f[R], \f[B]conda-env\f[R]
.PP
A few sample use cases:
https://www.rcac.purdue.edu/knowledge/brown/run/examples/apps/python/packages
