.\" Manpage for conda-env-mod.
.\" Contact rcac-help@purdue.edu to correct errors or typos.
.TH man 7 "11 Oct 2019" "0.1.0" "conda-env-mod man page"
.SH NAME
conda-env-mod \- Create and configure a custom anaconda environment for installing Python packages.
.SH SYNOPSIS
conda-env-mod subcommand [options]...
.SH DESCRIPTION
conda-env-mod

    This script makes very minimal Anaconda environments and generates
    Lmod module files for using them.  Users can later install and use
    python packages in the environment after loading the modules.

    Key points:
      - no need to 'source activate' or 'conda activate' (tcsh users, rejoice!)
      - all users do is a familiar 'module use' and 'module load/unload'
      - generated environments have access to all packages of base Anaconda
        (but users can also install their extras into environment)
      - no more permission errors when Google tells user to plain 'pip install'
      - sane Jupyter kernels


    Usage: conda-env-mod <subcommand> ...arguments...
           conda-env-mod create <[-n env_name]|[-p env_path]> [-m module_dir]
           conda-env-mod delete <[-n env_name]|[-p env_path]> [-m module_dir]
           conda-env-mod module <[-n env_name]|[-p env_path]> [-m module_dir]
           conda-env-mod kernel <[-n env_name]|[-p env_path]>
           conda-env-mod help

    Examples:
           conda-env-mod create -n my_test
           conda-env-mod create -p /my/depot/dir/my_test
           .....
           module use $HOME/privatemodules
           module load conda-env/my_test-py2.7.14
           pip install ....
           conda install ....

    Subcommands:
           "create": Create an environment.
                     Must specify env_name or env_prefix.
           "delete": Delete an existing environment.
                     Must specify env_name or env_prefix.
           "module": Create a module file for an existing environment.
                     Must specify env_name or env_prefix.
           "kernel": Create a Jupyter kernel for an existing environment.
                     Must specify env_name or env_prefix.
           "help":   Display this help menu

    Arguments:
           You should only specify either env_name OR env_path, not both!
           If env_path is specified, env_name is ignored.

        Required (pick one):
           -n|--name env_name
                     Name of the environment.
           -p|--prefix env_path
                     Location of the environment.

        Optional:
           -a|--appname app_name
                     Name of the module corresponding to the environment.
                     Default value is 'conda-env'
           -m|--moduledir module_dir
                     Location of module file.
                     Default value is $HOME/privatemodules

           -y|--yes  Assume "yes" to all internal questions.
                     Default is to ask confirmations interactively.

           -j|--jupyter
                     When performing "create" or "module", also generate
                     a Jupyter kernel for this environment.  This option
                     will also imply '--local-python'.
                     Default is to skip Jupyter kernel creation.

           --local-py|--local-python
           --add-path |--add-to-path
                     By default, generated modulefiles rely on Python
                     interpreter from base Anaconda (new environment's
                     "bin" directory is not added to $PATH).  While this
                     is intentional and desired, for some rare occasions you
                     might need to do the opposite and use Python and commands
                     from the new environment instead.  One notable use case
                     is when creating a Jupyter kernel for new environment,
                     or occasionally when some of your desired packages
                     conflict with their counterparts in the base Anaconda.
                     This switch will tweak the modulefile to prepend
                     environment's bindir to the $PATH.  Note that if you go
                     this route, base Anaconda packages become unavailable,
                     so you would have to install _all_ off your necessary
                     packages into the environment.

    To summarize:
       * In default mode, resulting environment uses *base* python and all
         base's existing packages, while 'pip install' and 'conda install'
         conveniently install new packages into the environment.
       * In the '--local-python' mode, your resulting environment uses
         the *environment's* python, and does *not* see any of the base
         Anaconda packages.  So you need to 'pip install' and 'conda install'
         everything you need.
       * Do not use 'pip install --user' (you want your packages to go into
         the environment, not into $HOME/.local/lib/).

    When generating Jupyter kernels ('kernel' mode or '--jupyter'),
    everything above about '--local-python' applies.  Additionally, we
    highly recommend installing your packages from command line.
    DO NOT USE plain '!pip install' or '!conda install' from inside
    Jupyter notebook! See excellent explanation why here:
       http://jakevdp.github.io/blog/2017/12/05/installing-python-packages-from-jupyter/
    If you do need to install packages from inside a notebook, use either
    of these calls in a cell:
       !{sys.executable} -m pip install .....
       !conda install --yes --prefix {sys.prefix} .....
    The '{sys.executable}' and '{sys.prefix}' tokens make sure that the
    kernel's own tools are used (and not ones from the separate JupyterHub
    installation itself), so packages get installed in the right location
    and remain visible for the kernel.

.SH OPTIONS
None
.SH SEE ALSO
conda-env-mod(7), conda-env
.SH BUGS
No known bugs.
.SH AUTHOR
Amiya K Maji and Lev Gorenstein, Purdue University
